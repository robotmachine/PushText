#!/usr/bin/env python3

#  ____            _   _____         _   
# |  _ \ _   _ ___| |_|_   _|____  _| |_ 
# | |_) | | | / __| '_ \| |/ _ \ \/ / __|
# |  __/| |_| \__ \ | | | |  __/>  <| |_ 
# |_|    \__,_|___/_| |_|_|\___/_/\_\\__|
#                                        
# Command line tool for [Pushover](http://pushover.net)
#
ptVersion =       "2.0"
ptProjectSource = "https://gitlab.com/robotmachine/PushText"
ptAuthorName =    "Brian A. Carter"
ptAuthorEmail =   "robotmachine@protonmail.ch"
ptCopyright =     "2013-2018"
# 
## License
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys, urllib, http.client, configparser, textwrap, argparse
#
## Import Requests
#
try:
    import requests
except:
    print(" \nPushText requires requests\nYou can probably install it with:\n    #> pip install requests\n ")
#
#
def main():
    parser = argparse.ArgumentParser(description='PushText: Command line tool for http://pushover.net', prog='pt')
    parser.add_argument('-u','--user-key',
        action='store', dest='user_key', default=None,
        help='User key instead of reading from settings.')
    parser.add_argument('-t','--token-key',
        action='store', dest='token_key', default=None,
        help='Token key instead of reading from settings.')
    parser.add_argument('-p', '--priority',
        action='store', dest='priority', default=None,
        help='Set priority of high or low. Default is normal.')
    parser.add_argument('-m','--message',
        action='store', dest='message', default='PushText',
        help='Message to send. Default is "PushText"')
    parser.add_argument('-d','--device',
        action='store', dest='device', default=None,
        help='Device name to receive message. Default sends to all devices.')
    parser.add_argument('--title',
        action='store', dest='title', default='PushText',
        help='Title or application name. Default is PushText')
    parser.add_argument('--url',
        action='store', dest='URL', default=None,
        help='Optional URL to accompany your message.')
    parser.add_argument('--urltitle',
        action='store', dest='URL_title', default='None',
        help='Title to go with your URL.')
    parser.add_argument('-v','--version',
        action='store_true', dest='version',
        help='Print version.')
    args = parser.parse_args()
    #
    ## Version
    if args.version:
        printVersion()
    #
    ## User key
    if args.user_key is not None:
        if len(args.user_key) != 30:
            print("User keys must be exactly 30 characters.")
            quit()
        else:
            userKey = str(args.user_key)
    else:
        userKey = readConfig('userKey')
    #
    ## Token
    if args.token_key is not None:
        if len(args.token_key) != 30:
            print("Tokens must be exactly 30 characters.")
            quit()
        else:
            token = str(args.token_key)
    else:
        token = readConfig('token')
    #
    # Build header dictionary
    body = {
           'user': userKey,
           'token': token,
           'title': str(args.title),
           'message': str(args.message)
           }
    #
    # Priority
    if args.priority is None:
        body['priority'] = 0
    elif (args.priority.lower() in ["high","hi","h"]):
        body['priority'] = 1
    elif (args.priority.lower() in ["low","lo","l"]):
        body['priority'] = -1
    else:
        body['priority'] = 0
    #
    ## Device
    if args.device is not None:
        if len(args.device) <= 25:
            body['device'] = str(args.device)
        else:
            print("Device names must be 25 or fewer characters.")
    #
    ## URL
    if args.URL is not None:
        body['url'] = str(args.URL)
        if args.URL_title is None:
            body['url_title'] = "PushText URL"
        else:
            body['url_title'] = str(args.URL_title)
    #
    ## Send Message
    sendMessage(body)
#
## Send the message!
def sendMessage(body):
    ## Base URL
    baseUrl = "api.pushover.net"
    sendUrl = "https://{!s}/1/messages.json".format(baseUrl)
    sendMessage = requests.post(sendUrl, body)
#
## Read config
def readConfig(needful):
    config = configparser.ConfigParser()
    global ConfigFile
    ConfigFile = os.path.expanduser("~/.ptrc")
    if not os.path.exists(ConfigFile):
        setConfig()
    #
    if needful == 'userKey':
        config.read(ConfigFile)
        result = config['PushText']['user']
    elif needful == 'token':
        config.read(ConfigFile)
        result = config['PushText']['token']
    else:
        print("How did you even do that?")
        quit()
    return result
#
## Setup Config
def setConfig():
    print(textwrap.dedent("""
    No PushText config file found... running setup.
    
    
    You will need to create your own app 
    with Pushover and provide the token.
    https://pushover.net/apps
    """))
    token = queryTool("Application Token: ")
    if (token == ""):
        print("Token is required.")
        quit()
    elif len(token) != 30:
        print("Token must be exactly 30 characters long.")
        quit()
    print(textwrap.dedent("""
    Your user key is found on your 
    Pushover.net Dashboard    
    https://pushover.net
    """))
    user = queryTool("User Key: ")
    if (user == ""):
        print("User key is required.")
        quit()
    elif len(user) != 30:
        print("User key must be exactly 30 characters long.")
        quit()
    config = configparser.ConfigParser()
    config ['PushText'] = {'token': token,
                   'user': user}        
    with open(ConfigFile, 'w') as configfile:
        config.write(configfile)
    print("\nSettings saved!\n")
    quit()
#
## Query Tool
def queryTool(query):
    try:
        result = input(query)
        return result
    except KeyboardInterrupt:
        print("\nUser Exited")
        quit()
    except:
        print("\nSyntax Error")
        quit()

#
## Print Current Version Information
def printVersion():
    print("\nPushText v.{!s}\n\n(c){!s} {!s}\n{!s}\nProject Home: {!s}\n\n".format(ptVersion, ptCopyright, ptAuthorName, ptAuthorEmail, ptProjectSource))
    quit()
#
## Hey. It's main()
main()
