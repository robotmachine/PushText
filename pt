#!/usr/bin/env python3

"""
 ____            _   _____         _   
|  _ \ _   _ ___| |_|_   _|____  _| |_ 
| |_) | | | / __| '_ \| |/ _ \ \/ / __|
|  __/| |_| \__ \ | | | |  __/>  <| |_ 
|_|    \__,_|___/_| |_|_|\___/_/\_\\__|
                                       
v.1.2

Project Homepage: 	https://robotmachine.github.io/PushText
Project Source:		https://github.com/robotmachine/PushText

PushText
Command line tool for [Pushover](http://pushover.net)
(C)2013 Brian A. Carter (robotmachine@gmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import os, sys, urllib, http.client, configparser, textwrap, argparse

global ptVer
ptVer = str("1.2")

def main():
	parser = argparse.ArgumentParser(description='PushText: Command line tool for http://pushover.net', prog='pt')
	parser.add_argument('-u','--user-key',
		action='store', dest='user_key', default=None,
		help='User key instead of reading from settings.')
	parser.add_argument('-t','--token-key',
		action='store', dest='token_key', default=None,
		help='Token key instead of reading from settings.')
	parser.add_argument('-p', '--priority',
		action='store', dest='priority', default=None,
		help='Set priority of high or low. Default is normal.')
	parser.add_argument('-m','--message',
		action='store', dest='message', default='PushText',
		help='Message to send. Default is "PushText"')
	parser.add_argument('-d','--device',
		action='store', dest='device', default=None,
		help='Device name to receive message. Default sends to all devices.')
	parser.add_argument('--title',
		action='store', dest='title', default='PushText',
		help='Title or application name. Default is PushText')
	parser.add_argument('--url',
		action='store', dest='URL', default=None,
		help='Optional URL to accompany your message.')
	parser.add_argument('--urltitle',
		action='store', dest='URL_title', default='None',
		help='Title to go with your URL.')
	args = parser.parse_args()
	#
	if args.user_key is None or args.token_key is None:
		ReadConfig('test')
	# User key
	if args.user_key is not None:
		UserKey = str(args.user_key)
	else:
		UserKey = ReadConfig('uk')
	# Token
	if args.token_key is not None:
		TokenKey = str(args.token_key)
	else:
		TokenKey = ReadConfig('to')
	# Priority
	if args.priority is None:
		Priority = 0
	elif (args.priority in ["High","high","Hi","HI","hi","H","h"]):
		Priority = 1
	elif (args.priority in ["Low","low","Lo","lo","L","l"]):
		Priority = -1
	else:
		Priority = 0
	# Variables
	Message = str(args.message)
	Device = str(args.device)
	Title = str(args.title)
	# URL
	URL = str(args.URL)
	if args.URL is not None and args.URL_title is not None:
		URLTitle = "PushText URL"
	else:
		URLTitle = str(args.URL_title)
	#
	SendIt(UserKey, TokenKey, Priority, Message, Device, Title, URL, URLTitle)
	
def ReadConfig(x):
	config = configparser.ConfigParser()
	global ConfigFile
	ConfigFile = os.path.expanduser("~/.ptrc")
	if not os.path.exists(ConfigFile):
		SetConfig()
	#
	if x == 'uk':
		config.read(ConfigFile)
		result = config['PushText']['user']
	elif x == 'to':
		config.read(ConfigFile)
		result = config['PushText']['token']
	elif x == 'test':
		result = 'test'
	else:
		print("How did you even do that?")
	return result
		
def SendIt(UserKey, TokenKey, Priority, Message, Device, Title, URL, URLTitle):
	conn = http.client.HTTPSConnection("api.pushover.net:443")
	if Device and URL is None:
		conn.request("POST", "/1/messages.json",
			urllib.parse.urlencode({
				"token": TokenKey,
				"user": UserKey,
				"title": Title,
				"message": Message,
				"priority": Priority,
			}), { "Content-type": "application/x-www-form-urlencoded" })
	elif Device is None and URL is not None:
		conn.request("POST", "/1/messages.json",
			urllib.parse.urlencode({
				"token": TokenKey,
				"user": UserKey,
				"title": Title,
				"message": Message,
				"priority": Priority,
				"url": URL,
				"url_title": URLTitle,
			}), { "Content-type": "application/x-www-form-urlencoded" })
	elif Device is not None and URL is None:
		conn.request("POST", "/1/messages.json",
			urllib.parse.urlencode({
				"token": TokenKey,
				"user": UserKey,
				"title": Title,
				"message": Message,
				"priority": Priority,
				"device": Device,
			}), { "Content-type": "application/x-www-form-urlencoded" })
	elif Device is not None and URL is not None:
		conn.request("POST", "/1/messages.json",
			urllib.parse.urlencode({
				"token": TokenKey,
				"user": UserKey,
				"title": Title,
				"message": Message,
				"priority": Priority,
				"url": URL,
				"url_title": URLTitle,
				"device": Device,
			}), { "Content-type": "application/x-www-form-urlencoded" })
	else:
		print("Something went wrong with sending that doesn't have an error message.")
		quit()

	response=conn.getresponse()
	if response.status is 200:
		quit()
	else:
		print("Oops. You bwoke it.")
		print("Pushover sez:", response.status, response.reason)

def SetConfig():
	print(textwrap.dedent("""
	No PushText config file found... running setup.
	
	
	Leave the API key blank to use
	the PushText key. I cannot see  messages
	that are sent. Otherwise, you will 
	need to create your own app 
	with Pushover and provide the token.
	https://pushover.net/apps
	"""))
	token = QueryTool("Application Token: ")
	if (token == ""):
		token = "VRC3JcAazvpi3KkilC8HFS6Kp0pI7X"
	elif len(token) != 30:
		print("Token must be exactly 30 characters long.")
		quit()
	print(textwrap.dedent("""
	Your user key is found on your 
	Pushover.net Dashboard	
	https://pushover.net
	"""))
	user = QueryTool("User Key: ")
	if (user == ""):
		print("User key is required.")
		quit()
	elif len(user) != 30:
		print("User key must be exactly 30 characters long.")
		quit()
	config = configparser.ConfigParser()
	config ['PushText'] = {'token': token,
			       'user': user}		
	with open(ConfigFile, 'w') as configfile:
		config.write(configfile)
	print("Settings saved!")
	quit()

def QueryTool(query):
	try:
		result = input(query)
		return result
	except KeyboardInterrupt:
		print("\nUser Exited")
		quit()
	except:
		print("\nSyntax Error")
		quit()

def PrintVersion():
	print("PushText v."+ptVer+"\n\n(C)2013 Brian A. Carter\nrobotmachine@gmail.com\nhttps://robotmachine.github.io/PushText")

main()
